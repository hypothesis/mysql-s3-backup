#!/bin/sh
#
# mysql-s3-backup
#
# This script is intended to be run in a cronjob to take daily backups of a
# MySQL database.
#
# mysql-s3-backup takes no arguments, but needs to be configured
# through environment variables, the details of which can be found immediately
# below:

# MySQL host
: ${MYSQL_HOST:=}
# MySQL database
: ${MYSQL_DB:=}
# MySQL user
: ${MYSQL_USER:=}
# MySQL password
: ${MYSQL_PASSWORD:=}
# Name of the dump to take. Defaults to "mysql-<isodate>".
: ${DUMP:=mysql-$(date +"%Y-%m-%d-%H%M%S")}
# S3 prefix in the form of `s3://bucket-name/folder`
: ${S3_URL:=}
# A "Dead Man's Snitch" URL. Optional.
: ${SNITCH_URL:=}

localpath=/var/backups/$DUMP.dump.gz

set -eu

abort() {
    echo "error: $@" >&2
    exit 1
}

check_mysql_config() {
    if [ -z "$MYSQL_HOST" ] || [ -z "$MYSQL_DB" ] || [ -z "$MYSQL_USER" ] || [ -z "$MYSQL_PASSWORD" ]; then
        abort "need to have MYSQL_HOST, MYSQL_DB, MYSQL_USER, and MYSQL_PASSWORD variables set"
    fi
}

check_aws_credentials() {
    if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
        abort "need to have AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY variables set"
    fi
}

check_s3_url() {
    if [ -z "$S3_URL" ]; then
        abort "need to have S3_URL variable set"
    fi
}

dump() {
    cat >"$HOME/.my.cnf" <<EOM
[mysqldump]
host=$MYSQL_HOST
user=$MYSQL_USER
password=$MYSQL_PASSWORD
EOM

    if ! $(mysqldump "$MYSQL_DB" | gzip -9 > $localpath); then
        abort "couldn't dump database"
    fi
}

upload() {
    local s3path=${S3_URL%%/}/${localpath##*/}
    aws s3 cp --quiet $localpath $s3path || abort "failed to upload dump"
}

snitch () {
    if [ -n "$SNITCH_URL" ]; then
        curl -sSL -o/dev/null "$SNITCH_URL"
    fi
}

main() {
    # Check MySQL configuration.
    check_mysql_config

    # Check AWS credentials.
    # check_aws_credentials

    # Check S3_URL.
    # check_s3_url

    # Backup database dump.
    dump

    # Upload to S3.
    upload

    # Report the backup.
    snitch
}

main
